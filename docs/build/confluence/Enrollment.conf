<p>The Enrollment module allows CMS analysts to view enrollment. This module can be levereged with the Paletable module to apply specific filters. Doing so, analysts can view enrollment by state, income bracket, age, etc. This module uses the pandas library and elements of the pyspark library. Note the Paletable module is imported here as well. As such, the Enrollment module inherits from the Paletable module.</p>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment</ac:parameter>
</ac:structured-macro>
<em>class </em><code>Enrollment.</code><strong><code>Enrollment</code></strong>(<em><em>runIds</em>: <em>Optional[list]</em> = None</em>, <em><em>paletable</em>: <em>Optional[<ac:link ac:anchor="Paletable.Paletable">
<ri:page ri:content-title="Paletable" />
<ac:link-body>Paletable.Paletable</ac:link-body>
</ac:link>]</em> = None</em>, <em><em>period</em>: <em>str</em> = &apos;full&apos;</em>)</dt>
<dd><p>Bases: <ac:link ac:anchor="Paletable.Paletable">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>Paletable.Paletable</code></ac:link-body>
</ac:link></p>
<p>The class within the PALET library for viewing enrollment. This class is used to view enrollment for Medicaid and CHIP. Attributes inherited from the Paletable class can be used to apply and_filters for enrollee age, ehtnicity, gender, state, income, etc.</p>
<p>Enrollment counts are the sum of the unique beneficiaries enrolled at least one day in a given month or year.</p>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>If the Enrollment class is called without a by group, it defaults to by year.</p>
</ac:rich-text-body>
</ac:structured-macro>
<p style="font-weight: bold; margin-top: 30px">Examples</p>
<p>Import enrollment:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> from palet.Enrollment import Enrollment]]></ac:plain-text-body>
</ac:structured-macro>
<p>Create object for enrollment</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment()]]></ac:plain-text-body>
</ac:structured-macro>
<p>Return dataframe for yearly enrollment:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api.fetch()]]></ac:plain-text-body>
</ac:structured-macro>
<p>Pivot to by state:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> display(api.byState().fetch())]]></ac:plain-text-body>
</ac:structured-macro>
<p>Pivot to by month and state:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> display(api.byMonth().byState().fetch())]]></ac:plain-text-body>
</ac:structured-macro>
<p>User defined run ids:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment([6278, 6280])]]></ac:plain-text-body>
</ac:structured-macro>
<p>Specifying run ids and switching context</p>
<p>or</p>
<p>switching context by Parameter naming</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Eligibility([6278, 6280], api) or]]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Eligibility([], api)]]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Eligibility(paletable=api)]]></ac:plain-text-body>
</ac:structured-macro>
<p>You may also request FULL or PARTIAL month enrollments.</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment(period='full')]]></ac:plain-text-body>
</ac:structured-macro>
<p>or</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment(period='partial')]]></ac:plain-text-body>
</ac:structured-macro>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>list</strong> – List of defined run ids you wish to use. Not required, defaults to list of latest run ids.</p>
</li>
<li>
<p><strong>Paletable</strong> – No input required, defaults to None.</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>DataFrame with counts for enrollment and precentage changes from previous period.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>Spark DataFrame</p>
</td>
</tr>
</tbody>
</table>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.usingRundIds</ac:parameter>
</ac:structured-macro>
<strong><code>usingRundIds</code></strong>()</dt>
<dd><p>Specify the run ids you would like to query. See <ac:link ac:anchor="Paletable.Paletable.usingRunIds">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>usingRunIds()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.displayCurrentRunIds</ac:parameter>
</ac:structured-macro>
<strong><code>displayCurrentRunIds</code></strong>()</dt>
<dd><p>Return a list of the run ids included in your query. See <ac:link ac:anchor="Paletable.Paletable.displayCurrentRunIds">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>displayCurrentRunIds()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.byAgeRange</ac:parameter>
</ac:structured-macro>
<strong><code>byAgeRange</code></strong>()</dt>
<dd><p>Filter your query by Age Range. See <ac:link ac:anchor="Paletable.Paletable.byAgeRange">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byAgeRange()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.byRaceEthnicity</ac:parameter>
</ac:structured-macro>
<strong><code>byRaceEthnicity</code></strong>()</dt>
<dd><p>Filter your query by Race. See <ac:link ac:anchor="Paletable.Paletable.byRaceEthnicity">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byRaceEthnicity()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.byRaceEthnicityExpanded</ac:parameter>
</ac:structured-macro>
<strong><code>byRaceEthnicityExpanded</code></strong>()</dt>
<dd><p>Filter your query by Race (expanded options). See <ac:link ac:anchor="Paletable.Paletable.byRaceEthnicityExpanded">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byRaceEthnicityExpanded()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.byEthnicity</ac:parameter>
</ac:structured-macro>
<strong><code>byEthnicity</code></strong>()</dt>
<dd><p>Filter your query by Ethnicity. See <ac:link ac:anchor="Paletable.Paletable.byEthnicity">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byEthnicity()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.byGender</ac:parameter>
</ac:structured-macro>
<strong><code>byGender</code></strong>()</dt>
<dd><p>Filter your query by Gender. See <ac:link ac:anchor="Paletable.Paletable.byGender">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byGender()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.byState</ac:parameter>
</ac:structured-macro>
<strong><code>byState</code></strong>()</dt>
<dd><p>Filter your query by State. See <ac:link ac:anchor="Paletable.Paletable.byState">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byState()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.byCoverageType</ac:parameter>
</ac:structured-macro>
<strong><code>byCoverageType</code></strong>()</dt>
<dd><p>Filter your query by Coverage Type. See <ac:link ac:anchor="Paletable.Paletable.byCoverageType">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byCoverageType()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.byEnrollmentType</ac:parameter>
</ac:structured-macro>
<strong><code>byEnrollmentType</code></strong>()</dt>
<dd><p>Filter your query by Enrollment Type. See <ac:link ac:anchor="Paletable.Paletable.byEnrollmentType">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byEnrollmentType()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.byMedicaidOnly</ac:parameter>
</ac:structured-macro>
<strong><code>byMedicaidOnly</code></strong>()</dt>
<dd><p>Filter your query to only look at Medicaid enrollment <ac:link ac:anchor="Paletable.Paletable.byMedicaidOnly">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byMedicaidOnly()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.byIncomeBracket</ac:parameter>
</ac:structured-macro>
<strong><code>byIncomeBracket</code></strong>()</dt>
<dd><p>Filter your query by Income Bracket. See <ac:link ac:anchor="Paletable.Paletable.byIncomeBracket">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byIncomeBracket()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.byYear</ac:parameter>
</ac:structured-macro>
<strong><code>byYear</code></strong>()</dt>
<dd><p>Filter your query by Year. See <ac:link ac:anchor="Paletable.Paletable.byYear">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byYear()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.byMonth</ac:parameter>
</ac:structured-macro>
<strong><code>byMonth</code></strong>()</dt>
<dd><p>Filter your query by Month. See <ac:link ac:anchor="Paletable.Paletable.byMonth">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byMonth()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.fetch</ac:parameter>
</ac:structured-macro>
<strong><code>fetch</code></strong>()</dt>
<dd><p>Call this function when you are ready to return results. See <ac:link ac:anchor="Paletable.Paletable.fetch">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>fetch()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>The above attributes are inherited from the <ac:link ac:anchor="Paletable">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>Paletable</code></ac:link-body>
</ac:link> class. Attributes directly from the Enrollment class can be seen below.</p>
</ac:rich-text-body>
</ac:structured-macro>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.timeunit</ac:parameter>
</ac:structured-macro>
<em>class </em><strong><code>timeunit</code></strong></dt>
<dd><p>Bases: <code>object</code></p>
<p>The timeunit class is a subclass within the Enrollment. It is composed of two dictionaries: breakdown &amp; cull. This class specifies how counts for enrollment are calculated. When looking at enrollment by year, enrollment refers to beneficiaries who are enrolled at least one day in a given year. When looking at enrollment by month, enrollment refers to beneficiaries who are enrolled at least one day in a given month.</p>
<p>Breakdown - Provides the sum of all beneficiaries enrolled within the time period or periods specified.</p>
<p>Cull - Provides the individual beneficiaries enrolled within the time period or periods specified.</p>
<dl>
<dt>Available Time Units:</dt>
<dd>
<p>In Year (year) - Beneficiaries enrolled at least one day in a given year</p>
<p>In Month (month) - Beneficiaries enrolled at least one day in a given month</p>
<p>Full Month (full) - Beneficiaries enrolled in n days of a given month, where n is the total number of days in said month</p>
<p>Partial Month (partial) - Beneficiaries enrolled in 1 to n-1 days of a given month, where n is the total number of days in said month</p>
</dd>
</dl>
<p style="font-weight: bold; margin-top: 30px">Example</p>
<p>Specifying the time unit using .timeunit:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment()]]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api.timeunit = 'year']]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api.timeunit = 'month']]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api.timeunit = 'full']]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api.timeunit = 'partial']]></ac:plain-text-body>
</ac:structured-macro>
<p>Specifying the time unit using Enrollment()’s parameters:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment('year')]]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment('month')]]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment('partial')]]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment('full')]]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>This class affects both Medicaid &amp; CHIP Enrollment.</p>
</ac:rich-text-body>
</ac:structured-macro>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.timeunit.breakdown</ac:parameter>
</ac:structured-macro>
<strong><code>breakdown</code></strong><em> = {&apos;full&apos;: &quot;\n                &apos;Full Month&apos; as counter,\n                stack(12,\n                     1, {0}\n                       sum(case when a.mdcd_enrlmt_days_01 = 31 then 1 else 0 end) ,\n                       sum(case when a.chip_enrlmt_days_01 = 31 then 1 else 0 end) ,\n                     2, {1}\n                       sum(case\n                            when a.mdcd_enrlmt_days_02 = 29 then 1\n                            when (a.mdcd_enrlmt_days_02 = 28\n                                and ((a.de_fil_dt % 4 != 0) or ((a.de_fil_dt % 100 != 0)\n                                and (a.de_fil_dt % 400 != 0)))) then 1\n                            else 0 end),\n                       sum(case\n                            when a.chip_enrlmt_days_02 = 29 then 1\n                            when (a.chip_enrlmt_days_02 = 28\n                                and ((a.de_fil_dt % 4 != 0) or ((a.de_fil_dt % 100 != 0)\n                                and (a.de_fil_dt % 400 != 0)))) then 1\n                            else 0 end),\n                     3, {2}\n                       sum(case when a.mdcd_enrlmt_days_03 = 31 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_03 = 31 then 1 else 0 end),\n                     4, {3}\n                       sum(case when a.mdcd_enrlmt_days_04 = 30 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_04 = 30 then 1 else 0 end),\n                     5, {4}\n                       sum(case when a.mdcd_enrlmt_days_05 = 31 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_05 = 31 then 1 else 0 end),\n                     6, {5}\n                       sum(case when a.mdcd_enrlmt_days_06 = 30 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_06 = 30 then 1 else 0 end),\n                     7, {6}\n                       sum(case when a.mdcd_enrlmt_days_07 = 31 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_07 = 31 then 1 else 0 end),\n                     8, {7}\n                       sum(case when a.mdcd_enrlmt_days_08 = 31 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_08 = 31 then 1 else 0 end),\n                     9, {8}\n                       sum(case when a.mdcd_enrlmt_days_09 = 30 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_09 = 30 then 1 else 0 end),\n                    10, {9}\n                       sum(case when a.mdcd_enrlmt_days_10 = 31 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_10 = 31 then 1 else 0 end),\n                    11, {10}\n                       sum(case when a.mdcd_enrlmt_days_11 = 30 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_11 = 30 then 1 else 0 end),\n                    12, {11}\n                       sum(case when a.mdcd_enrlmt_days_12 = 31 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_12 = 31 then 1 else 0 end)\n                    ) as (month, {12} mdcd_enrollment, chip_enrollment)&quot;, &apos;month&apos;: &quot;\n                &apos;In Month&apos; as counter,\n                stack(12,\n                     1, {0}\n                       sum(case when a.mdcd_enrlmt_days_01 &gt; 0 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_01 &gt; 0 then 1 else 0 end),\n                     2, {1}\n                       sum(case when a.mdcd_enrlmt_days_02 &gt; 0 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_02 &gt; 0 then 1 else 0 end),\n                     3, {2}\n                       sum(case when a.mdcd_enrlmt_days_03 &gt; 0 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_03 &gt; 0 then 1 else 0 end),\n                     4, {3}\n                       sum(case when a.mdcd_enrlmt_days_04 &gt; 0 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_04 &gt; 0 then 1 else 0 end),\n                     5, {4}\n                       sum(case when a.mdcd_enrlmt_days_05 &gt; 0 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_05 &gt; 0 then 1 else 0 end),\n                     6, {5}\n                       sum(case when a.mdcd_enrlmt_days_06 &gt; 0 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_06 &gt; 0 then 1 else 0 end),\n                     7, {6}\n                       sum(case when a.mdcd_enrlmt_days_07 &gt; 0 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_07 &gt; 0 then 1 else 0 end),\n                     8, {7}\n                       sum(case when a.mdcd_enrlmt_days_08 &gt; 0 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_08 &gt; 0 then 1 else 0 end),\n                     9, {8}\n                       sum(case when a.mdcd_enrlmt_days_09 &gt; 0 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_09 &gt; 0 then 1 else 0 end),\n                    10, {9}\n                       sum(case when a.mdcd_enrlmt_days_10 &gt; 0 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_10 &gt; 0 then 1 else 0 end),\n                    11, {10}\n                       sum(case when a.mdcd_enrlmt_days_11 &gt; 0 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_11 &gt; 0 then 1 else 0 end),\n                    12, {11}\n                       sum(case when a.mdcd_enrlmt_days_12 &gt; 0 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_12 &gt; 0 then 1 else 0 end)\n                ) as (month, {12} mdcd_enrollment, chip_enrollment)&quot;, &apos;partial&apos;: &quot;\n                &apos;Partial Month&apos; as counter,\n                stack(12,\n                     1, {0}\n                       sum(case when a.mdcd_enrlmt_days_01 between 1 and 30 then 1 else 0 end) ,\n                       sum(case when a.chip_enrlmt_days_01 between 1 and 30 then 1 else 0 end) ,\n                     2, {1}\n                       sum(case\n                            when a.mdcd_enrlmt_days_02 between 1 and 27 then 1\n                            when (a.mdcd_enrlmt_days_02 = 28\n                                and ((a.de_fil_dt % 4 = 0) or ((a.de_fil_dt % 100 = 0)\n                                and (a.de_fil_dt % 400 = 0)))) then 1\n                            else 0 end),\n                       sum(case\n                            when a.chip_enrlmt_days_02 between 1 and 27 then 1\n                            when (a.chip_enrlmt_days_02 = 28\n                                and ((a.de_fil_dt % 4 = 0) or ((a.de_fil_dt % 100== 0)\n                                and (a.de_fil_dt % 400 = 0)))) then 1\n                            else 0 end),\n                     3, {2}\n                       sum(case when a.mdcd_enrlmt_days_03 between 1 and 30 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_03 between 1 and 30 then 1 else 0 end),\n                     4, {3}\n                       sum(case when a.mdcd_enrlmt_days_04 between 1 and 29 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_04 between 1 and 29 then 1 else 0 end),\n                     5, {4}\n                       sum(case when a.mdcd_enrlmt_days_05 between 1 and 30 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_05 between 1 and 30 then 1 else 0 end),\n                     6, {5}\n                       sum(case when a.mdcd_enrlmt_days_06 between 1 and 29 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_06 between 1 and 29 then 1 else 0 end),\n                     7, {6}\n                       sum(case when a.mdcd_enrlmt_days_07 between 1 and 30 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_07 between 1 and 30 then 1 else 0 end),\n                     8, {7}\n                       sum(case when a.mdcd_enrlmt_days_08 between 1 and 30 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_08 between 1 and 30 then 1 else 0 end),\n                     9, {8}\n                       sum(case when a.mdcd_enrlmt_days_09 between 1 and 29 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_09 between 1 and 29 then 1 else 0 end),\n                    10, {9}\n                       sum(case when a.mdcd_enrlmt_days_10 between 1 and 30 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_10 between 1 and 30 then 1 else 0 end),\n                    11, {10}\n                       sum(case when a.mdcd_enrlmt_days_11 between 1 and 29 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_11 between 1 and 29 then 1 else 0 end),\n                    12, {11}\n                       sum(case when a.mdcd_enrlmt_days_12 between 1 and 30 then 1 else 0 end),\n                       sum(case when a.chip_enrlmt_days_12 between 1 and 30 then 1 else 0 end)\n                    ) as (month, {12} mdcd_enrollment, chip_enrollment)&quot;, &apos;year&apos;: &quot;\n                &apos;In Year&apos; as counter,\n                sum(case when a.mdcd_enrlmt_days_yr &gt; 0 then 1 else 0 end) as mdcd_enrollment_yr,\n                sum(case when a.chip_enrlmt_days_yr &gt; 0 then 1 else 0 end) as chip_enrollment_yr,\n                stack(12,\n                        1, {0}\n                        sum(case when a.mdcd_enrlmt_days_01 &gt; 0 then 1 else 0 end),\n                        sum(case when a.chip_enrlmt_days_01 &gt; 0 then 1 else 0 end),\n                        2, {1}\n                        sum(case when a.mdcd_enrlmt_days_02 &gt; 0 then 1 else 0 end),\n                        sum(case when a.chip_enrlmt_days_02 &gt; 0 then 1 else 0 end),\n                        3, {2}\n                        sum(case when a.mdcd_enrlmt_days_03 &gt; 0 then 1 else 0 end),\n                        sum(case when a.chip_enrlmt_days_03 &gt; 0 then 1 else 0 end),\n                        4, {3}\n                        sum(case when a.mdcd_enrlmt_days_04 &gt; 0 then 1 else 0 end),\n                        sum(case when a.chip_enrlmt_days_04 &gt; 0 then 1 else 0 end),\n                        5, {4}\n                        sum(case when a.mdcd_enrlmt_days_05 &gt; 0 then 1 else 0 end),\n                        sum(case when a.chip_enrlmt_days_05 &gt; 0 then 1 else 0 end),\n                        6, {5}\n                        sum(case when a.mdcd_enrlmt_days_06 &gt; 0 then 1 else 0 end),\n                        sum(case when a.chip_enrlmt_days_06 &gt; 0 then 1 else 0 end),\n                        7, {6}\n                        sum(case when a.mdcd_enrlmt_days_07 &gt; 0 then 1 else 0 end),\n                        sum(case when a.chip_enrlmt_days_07 &gt; 0 then 1 else 0 end),\n                        8, {7}\n                        sum(case when a.mdcd_enrlmt_days_08 &gt; 0 then 1 else 0 end),\n                        sum(case when a.chip_enrlmt_days_08 &gt; 0 then 1 else 0 end),\n                        9, {8}\n                        sum(case when a.mdcd_enrlmt_days_09 &gt; 0 then 1 else 0 end),\n                        sum(case when a.chip_enrlmt_days_09 &gt; 0 then 1 else 0 end),\n                    10, {9}\n                        sum(case when a.mdcd_enrlmt_days_10 &gt; 0 then 1 else 0 end),\n                        sum(case when a.chip_enrlmt_days_10 &gt; 0 then 1 else 0 end),\n                    11, {10}\n                        sum(case when a.mdcd_enrlmt_days_11 &gt; 0 then 1 else 0 end),\n                        sum(case when a.chip_enrlmt_days_11 &gt; 0 then 1 else 0 end),\n                    12, {11}\n                        sum(case when a.mdcd_enrlmt_days_12 &gt; 0 then 1 else 0 end),\n                        sum(case when a.chip_enrlmt_days_12 &gt; 0 then 1 else 0 end)\n                ) as (month, {12} mdcd_enrollment, chip_enrollment)&quot;}</em></dt>
<dd></dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.timeunit.cull</ac:parameter>
</ac:structured-macro>
<strong><code>cull</code></strong><em> = {&apos;full&apos;: &apos;1=1&apos;, &apos;month&apos;: &apos;(\n                (a.mdcd_enrlmt_days_01 &gt; 0) or (a.chip_enrlmt_days_01 &gt; 0) or\n                (a.mdcd_enrlmt_days_02 &gt; 0) or (a.chip_enrlmt_days_02 &gt; 0) or\n                (a.mdcd_enrlmt_days_03 &gt; 0) or (a.chip_enrlmt_days_03 &gt; 0) or\n                (a.mdcd_enrlmt_days_04 &gt; 0) or (a.chip_enrlmt_days_04 &gt; 0) or\n                (a.mdcd_enrlmt_days_05 &gt; 0) or (a.chip_enrlmt_days_05 &gt; 0) or\n                (a.mdcd_enrlmt_days_06 &gt; 0) or (a.chip_enrlmt_days_06 &gt; 0) or\n                (a.mdcd_enrlmt_days_07 &gt; 0) or (a.chip_enrlmt_days_07 &gt; 0) or\n                (a.mdcd_enrlmt_days_08 &gt; 0) or (a.chip_enrlmt_days_08 &gt; 0) or\n                (a.mdcd_enrlmt_days_09 &gt; 0) or (a.chip_enrlmt_days_09 &gt; 0) or\n                (a.mdcd_enrlmt_days_10 &gt; 0) or (a.chip_enrlmt_days_10 &gt; 0) or\n                (a.mdcd_enrlmt_days_11 &gt; 0) or (a.chip_enrlmt_days_11 &gt; 0) or\n                (a.mdcd_enrlmt_days_12 &gt; 0) or (a.chip_enrlmt_days_12 &gt; 0)\n            )&apos;, &apos;partial&apos;: &apos;1=1&apos;, &apos;year&apos;: &apos;(\n                (a.mdcd_enrlmt_days_yr &gt; 0) or (a.chip_enrlmt_days_yr &gt; 0))&apos;}</em></dt>
<dd></dd>
</dl>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.mark</ac:parameter>
</ac:structured-macro>
<strong><code>mark</code></strong>(<em><em>condition</em>: <em><ac:link ac:anchor="Diagnoses.Diagnoses">
<ri:page ri:content-title="Diagnoses" />
<ac:link-body>Diagnoses.Diagnoses</ac:link-body>
</ac:link></em></em>, <em><em>marker</em>: <em>str</em></em>)</dt>
<dd><p>The mark function appends a condition column to a dataframe that was filtered using the <ac:link ac:anchor="Enrollment.Enrollment.having">
<ac:link-body><code>having()</code></ac:link-body>
</ac:link> function. Additionally, it is important to note that prior to including this function the analyst should create a list of the diagnoses codes they wish to filter by.</p>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>The mark function should only be utilized once the analyst has filtered their Enrollment object with <ac:link ac:anchor="Enrollment.Enrollment.having">
<ac:link-body><code>having()</code></ac:link-body>
</ac:link>.</p>
</ac:rich-text-body>
</ac:structured-macro>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>condition</strong> – <ac:link ac:anchor="Diagnoses">
<ri:page ri:content-title="Diagnoses" />
<ac:link-body><code>Diagnoses</code></ac:link-body>
</ac:link> object: Use the <ac:link ac:anchor="Diagnoses.Diagnoses.where">
<ri:page ri:content-title="Diagnoses" />
<ac:link-body><code>where()</code></ac:link-body>
</ac:link> function to specify a <ac:link ac:anchor="ServiceCategory">
<ri:page ri:content-title="ServiceCategory" />
<ac:link-body><code>ServiceCategory</code></ac:link-body>
</ac:link></p>
</li>
<li>
<p><strong>marker</strong> – <em>str</em>: The lable to be populated in the condition column.</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>Returns the updated object filtered by the specified chronic condition with a condition column</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>DataFrame</p>
</td>
</tr>
</tbody>
</table>
<p style="font-weight: bold; margin-top: 30px">Example</p>
<p>Create a list of diagnoses codes:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> AFib = ['I230', 'I231', 'I232', 'I233', 'I234', 'I235', 'I236', 'I237', 'I238', 'I213', 'I214', 'I219', 'I220',
            'I221', 'I222', 'I228', 'I229', 'I21A1', 'I21A9', 'I2101', 'I2102', 'I2109', 'I2111', 'I2119', 'I2121', 'I2129']]]></ac:plain-text-body>
</ac:structured-macro>
<p>Create an Enrollment object &amp; use the <ac:link ac:anchor="Enrollment.Enrollment.having">
<ac:link-body><code>having()</code></ac:link-body>
</ac:link> function with <ac:link ac:anchor="Diagnoses.Diagnoses.where">
<ri:page ri:content-title="Diagnoses" />
<ac:link-body><code>where()</code></ac:link-body>
</ac:link> as a parameter to filter by chronic condition:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment.ByMonth().having(Diagnoses.where(ServiceCategory.inpatient, AFib))]]></ac:plain-text-body>
</ac:structured-macro>
<p>Return DataFrame:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> display(api.fetch())]]></ac:plain-text-body>
</ac:structured-macro>
<p>Use the mark function to add a column specifying the chronic condition which the user is filtering by:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment().byMonth().mark(Diagnoses.where(ServiceCategory.inpatient, AFib), 'AFib')]]></ac:plain-text-body>
</ac:structured-macro>
<p>Return the more readable version of the DataFrame:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> display(api.fetch())]]></ac:plain-text-body>
</ac:structured-macro>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.having</ac:parameter>
</ac:structured-macro>
<strong><code>having</code></strong>(<em><em>constraint</em>: <em><ac:link ac:anchor="Diagnoses.Diagnoses">
<ri:page ri:content-title="Diagnoses" />
<ac:link-body>Diagnoses.Diagnoses</ac:link-body>
</ac:link></em></em>)</dt>
<dd><p>The having function, allows user to filter Enrollment objects by chronic conidition diagnoses. The <ac:link ac:anchor="Diagnoses.Diagnoses.where">
<ri:page ri:content-title="Diagnoses" />
<ac:link-body><code>where()</code></ac:link-body>
</ac:link> from <ac:link ac:anchor="Diagnoses">
<ri:page ri:content-title="Diagnoses" />
<ac:link-body><code>Diagnoses</code></ac:link-body>
</ac:link>. Additionally, it is important to note that prior to including this function the analyst should create a list of the diagnoses codes they wish to filter by.</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>constraint</strong> – <ac:link ac:anchor="Diagnoses">
<ri:page ri:content-title="Diagnoses" />
<ac:link-body><code>Diagnoses</code></ac:link-body>
</ac:link> object: Use the <ac:link ac:anchor="Diagnoses.Diagnoses.where">
<ri:page ri:content-title="Diagnoses" />
<ac:link-body><code>where()</code></ac:link-body>
</ac:link> function to specify a <ac:link ac:anchor="ServiceCategory">
<ri:page ri:content-title="ServiceCategory" />
<ac:link-body><code>ServiceCategory</code></ac:link-body>
</ac:link></p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>Returns the updated object filtered by the specified chronic condition.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>DataFrame</p>
</td>
</tr>
</tbody>
</table>
<p style="font-weight: bold; margin-top: 30px">Example</p>
<p>Create a list of diagnoses codes:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> AFib = ['I230', 'I231', 'I232', 'I233', 'I234', 'I235', 'I236', 'I237', 'I238', 'I213', 'I214', 'I219', 'I220',
            'I221', 'I222', 'I228', 'I229', 'I21A1', 'I21A9', 'I2101', 'I2102', 'I2109', 'I2111', 'I2119', 'I2121', 'I2129']]]></ac:plain-text-body>
</ac:structured-macro>
<p>Create an Enrollment object &amp; use the having function with <ac:link ac:anchor="Diagnoses.Diagnoses.where">
<ri:page ri:content-title="Diagnoses" />
<ac:link-body><code>where()</code></ac:link-body>
</ac:link> as a parameter to filter by chronic condition:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment.ByMonth().having(Diagnoses.where(ServiceCategory.inpatient, AFib))]]></ac:plain-text-body>
</ac:structured-macro>
<p>Return DataFrame:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> display(api.fetch())]]></ac:plain-text-body>
</ac:structured-macro>
<p>Use the <ac:link ac:anchor="Enrollment.Enrollment.mark">
<ac:link-body><code>mark()</code></ac:link-body>
</ac:link> function to add a column specifying the chronic condition which the user is filtering by:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment().byMonth().mark(Diagnoses.where(ServiceCategory.inpatient, AFib), 'AFib')]]></ac:plain-text-body>
</ac:structured-macro>
<p>Return the more readable version of the DataFrame:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> display(api.fetch())]]></ac:plain-text-body>
</ac:structured-macro>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Enrollment.Enrollment.sql</ac:parameter>
</ac:structured-macro>
<strong><code>sql</code></strong>()</dt>
<dd><p>The SQL query that the Enrollment class uses to pull dataframes.</p>
<p>This can be called allowing an analyst to view the SQL the Enrollment is using.</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>self</strong> – None - no input required.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>Returns a text string containing the SQL query run by the Enrollment class.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>str</p>
</td>
</tr>
</tbody>
</table>
<p style="font-weight: bold; margin-top: 30px">Example</p>
<p>Create object containing the SQL query:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> q = Enrollment().sql()]]></ac:plain-text-body>
</ac:structured-macro>
<p>Return the query as text:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> print(q)]]></ac:plain-text-body>
</ac:structured-macro>
<p>Alternative one line approach:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> print(Enrollment.sql())]]></ac:plain-text-body>
</ac:structured-macro>
</dd>
</dl>
</dd>
</dl>
