<p>The Diagnoses module is a critical component of filtering <ac:link ac:anchor="Enrollment">
<ri:page ri:content-title="Enrollment" />
<ac:link-body><code>Enrollment</code></ac:link-body>
</ac:link> by chronic coniditions. This module only contains the <a href="#top"><code>Diagnoses</code></a> class and the <ac:link ac:anchor="Diagnoses.Diagnoses.where">
<ac:link-body><code>Diagnoses.Diagnoses.where()</code></ac:link-body>
</ac:link> static method.</p>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Diagnoses.Diagnoses</ac:parameter>
</ac:structured-macro>
<em>class </em><code>Diagnoses.</code><strong><code>Diagnoses</code></strong></dt>
<dd><p>Bases: <code>object</code></p>
<p>The Diagnoses class creates an alias called diagnoses_cd that transposes the 12 dgns_cd columns allowing <ac:link ac:anchor="Enrollment.Enrollment.having">
<ri:page ri:content-title="Enrollment" />
<ac:link-body><code>Enrollment.Enrollment.having()</code></ac:link-body>
</ac:link> to filter by various diagnoses types. It also plays a role in the backend method for decorating the chronic conidition column the user specifies.</p>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Diagnoses.Diagnoses.alias</ac:parameter>
</ac:structured-macro>
<strong><code>alias</code></strong><em> = &apos;diagnosis_cd&apos;</em></dt>
<dd></dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Diagnoses.Diagnoses.inpatient</ac:parameter>
</ac:structured-macro>
<strong><code>inpatient</code></strong><em> = [&apos;dgns_1_cd&apos;, &apos;dgns_2_cd&apos;, &apos;dgns_3_cd&apos;, &apos;dgns_4_cd&apos;, &apos;dgns_5_cd&apos;, &apos;dgns_6_cd&apos;, &apos;dgns_7_cd&apos;, &apos;dgns_8_cd&apos;, &apos;dgns_9_cd&apos;, &apos;dgns_10_cd&apos;, &apos;dgns_11_cd&apos;, &apos;dgns_12_cd&apos;]</em></dt>
<dd></dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Diagnoses.Diagnoses.where</ac:parameter>
</ac:structured-macro>
<em>static </em><strong><code>where</code></strong>(<em><em>service_category</em>: <em><ac:link ac:anchor="ServiceCategory.ServiceCategory">
<ri:page ri:content-title="ServiceCategory" />
<ac:link-body>ServiceCategory.ServiceCategory</ac:link-body>
</ac:link></em></em>, <em><em>diagnoses</em>: <em>list</em></em>)</dt>
<dd><p>The static method where() is used to assign parameters for the <ac:link ac:anchor="Enrollment.Enrollment.having">
<ri:page ri:content-title="Enrollment" />
<ac:link-body><code>having()</code></ac:link-body>
</ac:link> in <ac:link ac:anchor="Enrollment">
<ri:page ri:content-title="Enrollment" />
<ac:link-body><code>Enrollment</code></ac:link-body>
</ac:link>. This is where the user assigns a service category from the <ac:link ac:anchor="ServiceCategory">
<ri:page ri:content-title="ServiceCategory" />
<ac:link-body><code>ServiceCategory</code></ac:link-body>
</ac:link> class and the list of diagnosis codes they have specified.</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>service_category</strong> – <em>attribute</em>: Specify an attribute from the <ac:link ac:anchor="ServiceCategory">
<ri:page ri:content-title="ServiceCategory" />
<ac:link-body><code>ServiceCategory</code></ac:link-body>
</ac:link> such as ServiceCategory.inpaitent</p>
</li>
<li>
<p><strong>diagnoses</strong> – <em>list</em>: User defined list of diagnosis codes</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>returns the updated object</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>Spark DataFrame</p>
</td>
</tr>
</tbody>
</table>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>The where() function is nested within <ac:link ac:anchor="Enrollment.Enrollment.having">
<ri:page ri:content-title="Enrollment" />
<ac:link-body><code>having()</code></ac:link-body>
</ac:link>.</p>
</ac:rich-text-body>
</ac:structured-macro>
<p style="font-weight: bold; margin-top: 30px">Example</p>
<p>Create a list of diagnoses codes:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> AFib = ['I230', 'I231', 'I232', 'I233', 'I234', 'I235', 'I236', 'I237', 'I238', 'I213', 'I214', 'I219', 'I220',
            'I221', 'I222', 'I228', 'I229', 'I21A1', 'I21A9', 'I2101', 'I2102', 'I2109', 'I2111', 'I2119', 'I2121', 'I2129']]]></ac:plain-text-body>
</ac:structured-macro>
<p>Create an Enrollment object &amp; use the <ac:link ac:anchor="Enrollment.Enrollment.having">
<ri:page ri:content-title="Enrollment" />
<ac:link-body><code>having()</code></ac:link-body>
</ac:link> function with <ac:link ac:anchor="Diagnoses.Diagnoses.where">
<ac:link-body><code>where()</code></ac:link-body>
</ac:link> as a parameter to filter by chronic condition:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment.ByMonth().having(Diagnoses.where(ServiceCategory.inpatient, AFib))]]></ac:plain-text-body>
</ac:structured-macro>
<p>Return DataFrame:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> display(api.fetch())]]></ac:plain-text-body>
</ac:structured-macro>
<p>Use the mark function to add a column specifying the chronic condition which the user is filtering by:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment([6280]).byMonth().mark(Diagnoses.where(ServiceCategory.inpatient, AFib), 'AFib')]]></ac:plain-text-body>
</ac:structured-macro>
<p>Return the more readable version of the DataFrame:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> display(api.fetch())]]></ac:plain-text-body>
</ac:structured-macro>
</dd>
</dl>
</dd>
</dl>
