<p>The Eligibility module allows CMS analysts to view eligible beneficiaries. This module can be levereged with the Paletable module to apply specific filters. Doing so, analysts can view eligibility by state, income bracket, age, etc. This module uses the pandas library and elements of the pyspark library. Note the Paletable module is imported here as well. As such, the Enrollment module inherits from the Paletable module.</p>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility</ac:parameter>
</ac:structured-macro>
<em>class </em><code>Eligibility.</code><strong><code>Eligibility</code></strong>(<em><em>runIds</em>: <em>Optional[list]</em> = None</em>, <em><em>paletable</em>: <em>Optional[<ac:link ac:anchor="Paletable.Paletable">
<ri:page ri:content-title="Paletable" />
<ac:link-body>Paletable.Paletable</ac:link-body>
</ac:link>]</em> = None</em>)</dt>
<dd><p>Bases: <ac:link ac:anchor="Paletable.Paletable">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>Paletable.Paletable</code></ac:link-body>
</ac:link></p>
<p>The class within the PALET library for viewing eligibility. This class is used to view eligibility for Medicaid and CHIP. Attributes inherited from the Paletable class can be used to apply and_filters for beneficiary age, ehtnicity, gender, state, income, etc.</p>
<p>Eligibility counts are the sum of the unique beneficiaries eligible at least one day in a given month or year.</p>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>If the Eligibility class is called without a by group, it defaults to by year.</p>
</ac:rich-text-body>
</ac:structured-macro>
<p style="font-weight: bold; margin-top: 30px">Examples</p>
<p>Import eligibility:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> from palet.Eligibility import Eligibility]]></ac:plain-text-body>
</ac:structured-macro>
<p>Create object for eligibility</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Eligibility()]]></ac:plain-text-body>
</ac:structured-macro>
<p>Return dataframe for yearly eligibility:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api.fetch()]]></ac:plain-text-body>
</ac:structured-macro>
<p>Pivot to by state:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> display(api.byState().fetch())]]></ac:plain-text-body>
</ac:structured-macro>
<p>Pivot to by month and state:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> display(api.byMonth().byState().fetch())]]></ac:plain-text-body>
</ac:structured-macro>
<p>User defined run ids:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Eligibility([6278, 6280])]]></ac:plain-text-body>
</ac:structured-macro>
<p>Specifying run ids and switching context</p>
<p>or</p>
<p>Switching context by parameter naming</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment([6278, 6280], api) or]]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment([], api)]]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment(paletable=api)]]></ac:plain-text-body>
</ac:structured-macro>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>list</strong> – List of defined run ids you wish to use. Not required, defaults to list of latest run ids.</p>
</li>
<li>
<p><strong>Paletable</strong> – No input required, defaults to None.</p>
</li>
</ul>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>DataFrame with counts for enrollment and precentage changes from previous period.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>Spark DataFrame</p>
</td>
</tr>
</tbody>
</table>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.usingRundIds</ac:parameter>
</ac:structured-macro>
<strong><code>usingRundIds</code></strong>()</dt>
<dd><p>Specify the run ids you would like to query. See <ac:link ac:anchor="Paletable.Paletable.usingRunIds">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>usingRunIds()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.displayCurrentRunIds</ac:parameter>
</ac:structured-macro>
<strong><code>displayCurrentRunIds</code></strong>()</dt>
<dd><p>Return a list of the run ids included in your query. See <ac:link ac:anchor="Paletable.Paletable.displayCurrentRunIds">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>displayCurrentRunIds()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.byAgeRange</ac:parameter>
</ac:structured-macro>
<strong><code>byAgeRange</code></strong>()</dt>
<dd><p>Filter your query by Age Range. See <ac:link ac:anchor="Paletable.Paletable.byAgeRange">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byAgeRange()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.byRaceEthnicity</ac:parameter>
</ac:structured-macro>
<strong><code>byRaceEthnicity</code></strong>()</dt>
<dd><p>Filter your query by Race. See <ac:link ac:anchor="Paletable.Paletable.byRaceEthnicity">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byRaceEthnicity()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.byRaceEthnicityExpanded</ac:parameter>
</ac:structured-macro>
<strong><code>byRaceEthnicityExpanded</code></strong>()</dt>
<dd><p>Filter your query by Race (expanded options). See <ac:link ac:anchor="Paletable.Paletable.byRaceEthnicityExpanded">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byRaceEthnicityExpanded()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.byEthnicity</ac:parameter>
</ac:structured-macro>
<strong><code>byEthnicity</code></strong>()</dt>
<dd><p>Filter your query by Ethnicity. See <ac:link ac:anchor="Paletable.Paletable.byEthnicity">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byEthnicity()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.byGender</ac:parameter>
</ac:structured-macro>
<strong><code>byGender</code></strong>()</dt>
<dd><p>Filter your query by Gender. See <ac:link ac:anchor="Paletable.Paletable.byGender">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byGender()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.byState</ac:parameter>
</ac:structured-macro>
<strong><code>byState</code></strong>()</dt>
<dd><p>Filter your query by State. See <ac:link ac:anchor="Paletable.Paletable.byState">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byState()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.byCoverageType</ac:parameter>
</ac:structured-macro>
<strong><code>byCoverageType</code></strong>()</dt>
<dd><p>Filter your query by Coverage Type. See <ac:link ac:anchor="Paletable.Paletable.byCoverageType">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byCoverageType()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.byEnrollmentType</ac:parameter>
</ac:structured-macro>
<strong><code>byEnrollmentType</code></strong>()</dt>
<dd><p>Filter your query by Enrollment Type. See <ac:link ac:anchor="Paletable.Paletable.byEnrollmentType">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byEnrollmentType()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.byMedicaidOnly</ac:parameter>
</ac:structured-macro>
<strong><code>byMedicaidOnly</code></strong>()</dt>
<dd><p>Filter your query to only look at Medicaid enrollment <ac:link ac:anchor="Paletable.Paletable.byMedicaidOnly">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byMedicaidOnly()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.byIncomeBracket</ac:parameter>
</ac:structured-macro>
<strong><code>byIncomeBracket</code></strong>()</dt>
<dd><p>Filter your query by Income Bracket. See <ac:link ac:anchor="Paletable.Paletable.byIncomeBracket">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byIncomeBracket()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.byYear</ac:parameter>
</ac:structured-macro>
<strong><code>byYear</code></strong>()</dt>
<dd><p>Filter your query by Year. See <ac:link ac:anchor="Paletable.Paletable.byYear">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byYear()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.byMonth</ac:parameter>
</ac:structured-macro>
<strong><code>byMonth</code></strong>()</dt>
<dd><p>Filter your query by Month. See <ac:link ac:anchor="Paletable.Paletable.byMonth">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byMonth()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.fetch</ac:parameter>
</ac:structured-macro>
<strong><code>fetch</code></strong>()</dt>
<dd><p>Call this function when you are ready to return results. See <ac:link ac:anchor="Paletable.Paletable.fetch">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>fetch()</code></ac:link-body>
</ac:link>.</p>
</dd>
</dl>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>The above attributes are inherited from the <ac:link ac:anchor="Paletable">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>Paletable</code></ac:link-body>
</ac:link> class. Attributes directly from the Eligibility class can be seen below.</p>
</ac:rich-text-body>
</ac:structured-macro>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.notEnrolled</ac:parameter>
</ac:structured-macro>
<strong><code>notEnrolled</code></strong>()</dt>
<dd><p>This function changes the context of Eligibility to return those who are NOT enrolled</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>self</strong> – None - no input required.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>Returns the Eligibily class with NOT enrolled context.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>str</p>
</td>
</tr>
</tbody>
</table>
<p style="font-weight: bold; margin-top: 30px">Example</p>
<p>Switch the context of Eligibility:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> Eligibility().notEnrolled()]]></ac:plain-text-body>
</ac:structured-macro>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.enrolled</ac:parameter>
</ac:structured-macro>
<strong><code>enrolled</code></strong>()</dt>
<dd><p>This function changes the context of Eligibility to back those who are enrolled</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>self</strong> – None - no input required.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>Returns the Eligibily class with enrolled context.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>str</p>
</td>
</tr>
</tbody>
</table>
<p style="font-weight: bold; margin-top: 30px">Example</p>
<p>Switch the context of Eligibility:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> Eligibility().enrolled()]]></ac:plain-text-body>
</ac:structured-macro>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Eligibility.Eligibility.sql</ac:parameter>
</ac:structured-macro>
<strong><code>sql</code></strong>()</dt>
<dd><p>The SQL query that the Eligibility class uses to pull dataframes.</p>
<p>This can be called allowing an analyst to view the SQL the Eligibility is using.</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>self</strong> – None - no input required.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>Returns a text string containing the SQL query run by the Eligibility class.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>str</p>
</td>
</tr>
</tbody>
</table>
<p style="font-weight: bold; margin-top: 30px">Example</p>
<p>Create object containing the SQL query:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> q = Eligibility().sql()]]></ac:plain-text-body>
</ac:structured-macro>
<p>Return the query as text:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> print(q)]]></ac:plain-text-body>
</ac:structured-macro>
<p>Alternative one line approach:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> print(Eligibility.sql())]]></ac:plain-text-body>
</ac:structured-macro>
</dd>
</dl>
</dd>
</dl>
