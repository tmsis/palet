<p>The Coverage module contains the Coverage class. This class is called when an analyst uses the .byCoverageType() by group. It expands the query being run by the existing object so that filters are applied for various kinds fo coverage. For example, when this class is utilized along wit enrollment or eligibility, one can view the enrollment counts or eligibilty counts for each different kind of coverage type.</p>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Coverage.Coverage</ac:parameter>
</ac:structured-macro>
<em>class </em><code>Coverage.</code><strong><code>Coverage</code></strong>(<em><em>runIds</em>: <em>Optional[list]</em> = None</em>, <em><em>paletable</em>: <em>Optional[<ac:link ac:anchor="Paletable.Paletable">
<ri:page ri:content-title="Paletable" />
<ac:link-body>Paletable.Paletable</ac:link-body>
</ac:link>]</em> = None</em>)</dt>
<dd><p>Bases: <ac:link ac:anchor="Paletable.Paletable">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>Paletable.Paletable</code></ac:link-body>
</ac:link></p>
<p>Class called when an analyst uses the .byCoverageType by group. This can be used to manipulate the query is running to break out counts by the specific coverage types. This class is combined with other Paletable objects like enrollment eligibility.</p>
<ac:structured-macro ac:name="info">
<ac:rich-text-body>
<p>The Coverage class does not need to be specifically imported from its respective module. The Coverage class is imported by the <ac:link ac:anchor="Paletable.Paletable.byCoverageType">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>byCoverageType()</code></ac:link-body>
</ac:link> method in <ac:link ac:anchor="Paletable">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>Paletable</code></ac:link-body>
</ac:link> when it is called.</p>
</ac:rich-text-body>
</ac:structured-macro>
<p style="font-weight: bold; margin-top: 30px">Examples</p>
<p>Create an object for Enrollment by month:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment().byMonth()]]></ac:plain-text-body>
</ac:structured-macro>
<p>Recreate object with Coverage Type by Group.</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = api.byCoverageType()]]></ac:plain-text-body>
</ac:structured-macro>
<p>Return dataframe:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> display(api.fetch())]]></ac:plain-text-body>
</ac:structured-macro>
<p>User defined run ids:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment([6278, 6280])]]></ac:plain-text-body>
</ac:structured-macro>
<p>Specifying run ids and switching context</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Coverage([6278, 6280], api) or]]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Coverage([], api)]]></ac:plain-text-body>
</ac:structured-macro>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Coverage(paletable=api)]]></ac:plain-text-body>
</ac:structured-macro>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><ul>
<li>
<p><strong>list</strong> – List of defined run ids you wish to use. Not required, defaults to list of latest run ids.</p>
</li>
<li>
<p><strong>Paletable</strong> – No input required, defaults to None.</p>
</li>
</ul>
</td>
</tr>
</tbody>
</table>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Coverage.Coverage.byType</ac:parameter>
</ac:structured-macro>
<strong><code>byType</code></strong>(<em><em>coverage_type</em>=None</em>)</dt>
<dd><p>Filter your query by Coverage Type. Most top level objects inherit this function such as Enrollment, Trend, etc. If your object is already set by a by group this will add it as the next by group.</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>coverage_type</strong> – <em>str, optional</em>: Filter a single coverage tye or multiple coverage types. Defaults to None.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p><ac:link ac:anchor="Paletable">
<ri:page ri:content-title="Paletable" />
<ac:link-body><code>Paletable</code></ac:link-body>
</ac:link>: returns the updated object</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>Spark DataFrame</p>
</td>
</tr>
</tbody>
</table>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Coverage.Coverage.sql</ac:parameter>
</ac:structured-macro>
<strong><code>sql</code></strong>()</dt>
<dd><p>The SQL query that the Enrollment class uses to pull dataframes.</p>
<p>This can be called allowing an analyst to view the SQL the Enrollment is using.</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>None</strong> – No input required.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>Returns a text string containing the SQL query run by the Enrollment class.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>str</p>
</td>
</tr>
</tbody>
</table>
<p style="font-weight: bold; margin-top: 30px">Example</p>
<p>Create object containing the SQL query:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> q = Enrollment().byState().sql()]]></ac:plain-text-body>
</ac:structured-macro>
<p>Return the query as text:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> print(q)]]></ac:plain-text-body>
</ac:structured-macro>
<p>Alternatively</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> print(Enrollment().byState().sql())]]></ac:plain-text-body>
</ac:structured-macro>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Coverage.Coverage.fetch</ac:parameter>
</ac:structured-macro>
<strong><code>fetch</code></strong>()</dt>
<dd><p>Call this method at the end of an object when you are ready for results.</p>
<p>This can be leveraged with display() to quickly pivot results.</p>
<table>
<tbody>
<tr>
<td style="border: none"><strong>Parameters:</strong></td>
<td style="border: none"><p><strong>None</strong> – No input required</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Returns:</strong></td>
<td style="border: none"><p>Executes your query and returns a Spark Datarame.</p>
</td>
</tr>
<tr>
<td style="border: none"><strong>Return type:</strong></td>
<td style="border: none"><p>Spark Datarame</p>
</td>
</tr>
</tbody>
</table>
<p style="font-weight: bold; margin-top: 30px">Example</p>
<p>Create object for enrollment by state and year</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api = Enrollment().byState()]]></ac:plain-text-body>
</ac:structured-macro>
<p>Return Spark DataFrame:</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> api.fetch]]></ac:plain-text-body>
</ac:structured-macro>
<p>Lever display() to pivot from yearly to monthly</p>
<ac:structured-macro ac:name="code">
<ac:parameter ac:name="language">python</ac:parameter>
<ac:plain-text-body><![CDATA[>>> display(api.byMonth().fetch())]]></ac:plain-text-body>
</ac:structured-macro>
</dd>
</dl>
<dl>
<dt><ac:structured-macro ac:name="anchor">
<ac:parameter ac:name="">Coverage.Coverage.log</ac:parameter>
</ac:structured-macro>
<strong><code>log</code></strong>(<em><em>viewname</em>: <em>str</em></em>, <em><em>sql</em>=&apos;&apos;</em>)</dt>
<dd><p>This attribute enhances logging. Logging contains multiple levels: INFO, DEBUG, WARNING, ERROR and TRACE.</p>
</dd>
</dl>
</dd>
</dl>
